local module = {}

module.TailWagging = function(rig)
    local tailBones = {}  -- Store bones per tail
    local tailSettings = {}  -- Store settings per tail
    local RigTorso = rig.Torso
    local RigTailAttach = RigTorso.Attach
    local RigTails = RigTorso.Tail:GetChildren()  -- Detect multiple tails

    -- Find all tails and their bones
    for _, tail in pairs(RigTails) do
        if tail:IsA("Model") then
            local bones = {}
            for _, v in pairs(tail:GetDescendants()) do
                if v:IsA("Bone") then
                    table.insert(bones, v)
                    v:SetAttribute("CFrame", v.CFrame)
                end
            end

            if #bones > 0 then
                -- Sort bones correctly
                table.sort(bones, function(a, b) return a.Name < b.Name end)
                tailBones[tail] = bones
                -- Tail-specific settings
                tailSettings[tail] = {
                    Mirror = tail:GetAttribute("Mirror") or false,  -- Mirroring for dual tails
                    BaseStrength = tail:GetAttribute("BaseStrength") or 1  -- Movement scaling
                }
            end
        end
    end

    if next(tailBones) == nil then
        warn("No tail bones found!")
        return
    end

    local runService = game:GetService("RunService")

    -- Wagging and bouncing settings
    local wagSpeed = 3
    local wagAmplitude = 15
    local bounceSpeed = 4
    local bounceAmplitude = 5
    local rotationInfluence = 5
    local exponentialWeakening = true  -- Makes the tip move less than the base

    local timeElapsed = 0
    local lastRotation = RigTorso.Orientation.Y

    runService.RenderStepped:Connect(function(deltaTime)
        timeElapsed = timeElapsed + deltaTime
        local currentRotation = RigTorso.Orientation.Y
        local rotationDelta = currentRotation - lastRotation
        lastRotation = currentRotation

        for tail, bones in pairs(tailBones) do
            local settings = tailSettings[tail]
            local baseStrength = settings.BaseStrength

            for i, bone in ipairs(bones) do
                local boneOffset = i * 0.5
                local wagAngle = math.sin(timeElapsed * wagSpeed + boneOffset) * wagAmplitude
                local bounceAngle = math.sin(timeElapsed * bounceSpeed + boneOffset) * bounceAmplitude
                local rotationOffset = rotationDelta * rotationInfluence / i

                -- Exponential weakening if enabled
                local strengthFactor = exponentialWeakening and (1 - (i / #bones)) or 1

                -- Correct axes: X for bounce, Z for wag
                bone.CFrame = bone:GetAttribute("CFrame") *
                    CFrame.Angles(math.rad(bounceAngle * strengthFactor * baseStrength), 0, math.rad(wagAngle * strengthFactor + rotationOffset))

                -- Mirroring for second tail
                if settings.Mirror then
                    bone.CFrame = bone.CFrame * CFrame.Angles(0, math.rad(180), 0)
                end
            end
        end
    end)
end

return module
