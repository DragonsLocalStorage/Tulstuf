local module = {}

module.TailWagging = function(rig)
    local tailBones = {}
    local RigTorso = rig.Torso
    local RigTorsoAttach = RigTorso.TailAttach -- Tail attachment point
    local RigTail = RigTorso.Tail

    -- Find all tail bones and store initial CFrame
    for _, v in pairs(RigTail:GetDescendants()) do
        if v:IsA("Bone") then
            table.insert(tailBones, v)
            v:SetAttribute("InitialCFrame", v.CFrame) -- Store initial rotation
        end
    end

    if #tailBones == 0 then
        warn("No tail bones found!")
        return
    end

    -- Sort bones to maintain hierarchy
    table.sort(tailBones, function(a, b)
        return a.Name < b.Name
    end)

    local runService = game:GetService("RunService")

    -- Configurable settings
    local settings = {
        wagSpeed = 3,  -- Speed of wagging
        wagAngle = math.rad(20),  -- How much the tail tilts left/right
        bounceSpeed = 4,  -- Speed of bouncing
        bounceAngle = math.rad(10),  -- How much the tail tilts up/down
        inertiaFactor = 0.5,  -- How much the tail follows movement
        avoidGround = true,  -- Prevents clipping into ground
        symmetricalTails = true,  -- Ensures both tails move identically
        mirrorTails = true,  -- Option to mirror tail movements
        randomizeMotion = false,  -- Option to add randomness to wagging
        lerpSpeed = 0.2  -- Controls smooth transition (higher = smoother, but slower response)
    }

    local timeElapsed = 0
    local lastPosition = RigTorsoAttach.Position

    runService.RenderStepped:Connect(function(deltaTime)
        timeElapsed = timeElapsed + deltaTime
        local positionDelta = RigTorsoAttach.Position - lastPosition
        lastPosition = RigTorsoAttach.Position

        for i, bone in ipairs(tailBones) do
            local boneOffset = i * 0.5
            local wagOffset = math.sin(timeElapsed * settings.wagSpeed + boneOffset) * settings.wagAngle
            local bounceOffset = math.sin(timeElapsed * settings.bounceSpeed + boneOffset) * settings.bounceAngle
            local inertiaOffset = positionDelta.Magnitude * settings.inertiaFactor / i

            if settings.randomizeMotion then
                wagOffset = wagOffset * math.random(0.8, 1.2)
                bounceOffset = bounceOffset * math.random(0.8, 1.2)
            end

            if settings.mirrorTails and (i % 2 == 0) then
                wagOffset = -wagOffset
            end

            local initialCFrame = bone:GetAttribute("InitialCFrame")

            -- Correct wagging (tilt left/right instead of drilling)
            local newCFrame = initialCFrame
                * CFrame.Angles(bounceOffset - inertiaOffset, 0, wagOffset) -- Z-axis wagging, X-axis bouncing

            -- Apply smooth transition
            bone.CFrame = bone.CFrame:Lerp(newCFrame, settings.lerpSpeed)
        end
    end)
end

return module
