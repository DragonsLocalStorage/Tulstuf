local module = {}

module.TailWagging = function(rig)
    local tailBones = {}
    local RigTorso = rig.Torso
    local RigTorsoAttach = RigTorso.Attach -- Player torso attachment
    local RigTailAttach = RigTorso.TailAttach -- Tail attachment point
    local RigTail = RigTorso.Tail

    -- Find all tail bones and store initial CFrames
    for _, v in pairs(RigTail:GetDescendants()) do
        if v:IsA("Bone") then
            table.insert(tailBones, v)
            v:SetAttribute("CFrame", v.CFrame)
        end
    end

    if #tailBones == 0 then
        warn("No tail bones found!")
        return
    end

    -- Sort bones based on hierarchy
    table.sort(tailBones, function(a, b)
        return a.Name < b.Name
    end)

    local runService = game:GetService("RunService")

    -- Configurable settings
    local settings = {
        wagSpeed = 3,  -- Speed of wagging
        wagAmplitude = 15,  -- Maximum wag angle (no spinning)
        bounceSpeed = 4,  -- Speed of bouncing
        bounceAmplitude = 5,  -- Maximum bounce angle
        rotationInfluence = 5,  -- Influence of character rotation
        inertiaFactor = 0.5,  -- How much the tail follows movement
        avoidGround = true,  -- Prevents clipping into ground
        symmetricalTails = true,  -- Ensures both tails move identically
        mirrorTails = true,  -- Option to mirror tail movements
        randomizeMotion = false,  -- Option to add randomness to wagging
        lerpSpeed = 0.2  -- Controls smooth transition (higher = smoother, but slower response)
    }

    local timeElapsed = 0
    local lastRotation = RigTorsoAttach.Orientation.Y
    local lastPosition = RigTorsoAttach.Position

    runService.RenderStepped:Connect(function(deltaTime)
        timeElapsed = timeElapsed + deltaTime
        local currentRotation = RigTorsoAttach.Orientation.Y
        local rotationDelta = currentRotation - lastRotation
        lastRotation = currentRotation

        local positionDelta = RigTorsoAttach.Position - lastPosition
        lastPosition = RigTorsoAttach.Position

        for i, bone in ipairs(tailBones) do
            local boneOffset = i * 0.5
            local wagAngle = math.sin(timeElapsed * settings.wagSpeed + boneOffset) * settings.wagAmplitude
            local bounceAngle = math.sin(timeElapsed * settings.bounceSpeed + boneOffset) * settings.bounceAmplitude
            local rotationOffset = rotationDelta * settings.rotationInfluence / i
            local inertiaOffset = positionDelta.Magnitude * settings.inertiaFactor / i

            -- Prevent excessive rotation (fixes drill effect)
            wagAngle = math.clamp(wagAngle, -settings.wagAmplitude, settings.wagAmplitude)
            bounceAngle = math.clamp(bounceAngle, -settings.bounceAmplitude, settings.bounceAmplitude)

            if settings.randomizeMotion then
                wagAngle = wagAngle * math.random(0.8, 1.2)
                bounceAngle = bounceAngle * math.random(0.8, 1.2)
            end

            if settings.mirrorTails and (i % 2 == 0) then
                wagAngle = -wagAngle
            end

            -- Fixed wagging rotation axis (switched rotation order)
            local newCFrame = bone:GetAttribute("CFrame")
                * CFrame.Angles(0, math.rad(wagAngle + rotationOffset), math.rad(bounceAngle + inertiaOffset))

            if settings.avoidGround and RigTorsoAttach.Position.Y - newCFrame.Position.Y < 2 then
                newCFrame = newCFrame + Vector3.new(0, 0.1, 0)
            end

            -- Apply lerp for smooth transitions
            bone.CFrame = bone.CFrame:Lerp(newCFrame, settings.lerpSpeed)
        end
    end)
end

return module
